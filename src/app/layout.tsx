import type { Metadata } from "next";
import { Geist, Poppins } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/client/providers/theme.provider";
import { Toaster } from "react-hot-toast";
import { startWorkers } from "@/server/workers/scheduler";
import { NetworkProvider } from "@/client/contexts/NetworkContext";
import { OfflineBanner } from "@/client/components/ui/offline-banner";

// Initialize workers in server environment
if (typeof window === "undefined") {
  startWorkers();
}
const poppins = Poppins({
  subsets: ["latin"],
  weight: ["400", "500", "600", "700"],
  variable: "--font-poppins",
});
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "StoreGo",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              try {
                const stored = localStorage.getItem('theme-storage');
                if (stored) {
                  const { state } = JSON.parse(stored);
                  if (state.darkMode) {
                    document.documentElement.classList.add('dark');
                  }
                } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
                  document.documentElement.classList.add('dark');
                }
              } catch (e) {}
            `,
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${poppins.className} antialiased`}
      >
        <ThemeProvider>
          {" "}
          <NetworkProvider>
            {children}
            <OfflineBanner />
            <Toaster
              toastOptions={{
                className: `!bg-background !text-foreground border border-border`,
                style: {
                  background: `hsl(var(--background))`,
                  color: `hsl(var(--foreground))`,
                  borderColor: `hsl(var(--border))`,
                },
                duration: 4000,
                position: "bottom-right",
              }}
            />
          </NetworkProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
