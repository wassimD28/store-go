meta {
  name: add-payment-method
  type: http
  seq: 2
}

post {
  url: {{BASE_URL}}/api/mobile-app/payments/methods
  body: json
  auth: bearer
}

auth:bearer {
  token: {{ACCESS_TOKEN}}
}

body:json {
  {
    "type": "credit_card",
    "isDefault": true,
    "stripePaymentMethodId": "pm_1234567890abcdef",
    "details": {
      "brand": "visa",
      "last4": "4242",
      "expiryMonth": "12",
      "expiryYear": "2025",
      "cardholderName": "John Doe"
    }
  }
}

script:pre-request {
  // Get the access token from environment variables
  const accessToken = bru.getEnvVar("ACCESS_TOKEN");
  
  if (accessToken) {
    // Set the access token in the request's auth header
    req.auth = {
      type: "bearer",
      bearer: accessToken
    };
    console.log("✅ Access token applied to request");
  } else {
    console.warn("⚠️ No access token found in environment variables");
  }
}

docs {  # Add Payment Method Endpoint
  
  This endpoint allows users to add a new payment method to their profile. The payment details are tokenized through Stripe's secure payment processor for security.
  
  ## Authentication Requirements
  
  - This endpoint requires authentication using a JWT bearer token
  - The token must be obtained from the sign-in endpoint
  
  ## Request Body
  
  The request body must be a JSON object with the following structure for credit cards:
  
  ```json
  {
    "type": "credit_card",
    "isDefault": true,
    "stripePaymentMethodId": "pm_1234567890abcdef",
    "details": {
      "brand": "visa",
      "last4": "4242",
      "expiryMonth": "12",
      "expiryYear": "2025",
      "cardholderName": "John Doe"
    }
  }
  ```
  
  | Field                 | Type    | Required | Description |
  |-----------------------|---------|----------|-------------|
  | type                  | string  | Yes      | Payment method type ("credit_card", "debit_card", "paypal", "apple_pay", "google_pay", "bank_transfer") |
  | stripePaymentMethodId | string  | Yes      | Stripe Payment Method ID from Stripe SDK (e.g., "pm_1234567890abcdef") |
  | isDefault             | boolean | No       | Whether this is the default payment method (defaults to false) |
  | details               | object  | No       | Payment method details for display purposes |
  | details.brand         | string  | No       | Card brand ("visa", "mastercard", etc.) |
  | details.last4         | string  | No       | Last 4 digits of card |
  | details.expiryMonth   | string  | No       | Card expiry month ("12") |
  | details.expiryYear    | string  | No       | Card expiry year ("2025") |
  | details.cardholderName| string  | No       | Name on the card |
    ## Response Format
  
  The endpoint returns a JSON object with the following structure:
  
  ```json
  {
    "status": "success",
    "message": "Payment method added successfully",
    "data": {
      "id": "payment-method-uuid",
      "storeId": "store-uuid",
      "appUserId": "user-uuid",
      "type": "credit_card",
      "isDefault": true,
      "stripePaymentMethodId": "pm_1234567890abcdef",
      "details": {
        "brand": "visa",
        "last4": "4242",
        "expiryMonth": "12",
        "expiryYear": "2025",
        "cardholderName": "John Doe"
      },
      "createdAt": "2024-01-15T10:30:00.000Z",
      "updatedAt": "2024-01-15T10:30:00.000Z"
    }
  }
  ```
    ## Error Responses
  
  | Status Code | Description | Response Body |
  |-------------|-------------|---------------|
  | 400 | Invalid request data | `{ "status": "error", "message": "Invalid payment method data", "errors": [...] }` |
  | 400 | Invalid Stripe payment method ID | `{ "status": "error", "message": "Invalid stripePaymentMethodId" }` |
  | 401 | Unauthorized | `{ "status": "error", "message": "Unauthorized" }` |
  | 422 | Payment processor error | `{ "status": "error", "message": "Payment processor error", "details": "..." }` |
  | 500 | Server error | `{ "status": "error", "message": "Failed to add payment method" }` |
  
  ## Security Implementation
  
  - The API expects a Stripe Payment Method ID from a secure client-side integration
  - Sensitive card data never hits our servers directly
  - Only Stripe Payment Method IDs from the Stripe SDK are handled by this endpoint
  - Actual payment details are stored securely by Stripe
  - Payment methods are automatically attached to the user's Stripe Customer when used for payments
  
  ## Integration Notes
  
  ### Client-Side Integration
  
  Use Stripe's SDK to create payment methods on the client side:
  
  ```javascript
  // Flutter/Dart example
  final paymentMethod = await Stripe.instance.createPaymentMethod(
    params: PaymentMethodParams.card(
      paymentMethodData: PaymentMethodData(
        billingDetails: BillingDetails(name: "John Doe")
      ),
    ),
  );
  
  // Send paymentMethod.id to your backend
  final response = await addPaymentMethod(
    stripePaymentMethodId: paymentMethod.id
  );
  ```
  
  ### Backend Processing
  
  - The endpoint uses `PaymentRepository.createPaymentMethod()` for database storage
  - If `isDefault` is true, other payment methods are automatically set to non-default
  - Multi-tenant support with proper `storeId` and `appUserId` context verification
  
  ## Related Endpoints
  
  - `GET /api/mobile-app/payments/methods` - Get all user payment methods
  - `DELETE /api/mobile-app/payments/methods/:methodId` - Delete a payment method
  - `PUT /api/mobile-app/payments/methods/:methodId/default` - Set a payment method as default
}
