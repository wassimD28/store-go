meta {
  name: pay-for-order
  type: http
  seq: 3
}

post {
  url: {{BASE_URL}}/api/mobile-app/orders/{{ORDER_ID}}/pay
  body: json
  auth: bearer
}

auth:bearer {
  token: {{ACCESS_TOKEN}}
}

body:json {
  {
    "paymentMethod": "credit_card",
    "paymentToken": "pm_1234567890abcdef",
    "savePaymentMethod": false
  }
}

vars:pre-request {
  ORDER_ID: 82d94ef6-3727-4f1e-81c8-d487867834c2
}

script:pre-request {
  const accessToken = bru.getEnvVar("ACCESS_TOKEN");
  
  if (accessToken) {
    req.auth = {
      type: "bearer",
      bearer: accessToken
    };
    console.log("✅ Access token applied to request");
  } else {
    console.warn("⚠️ No access token found in environment variables");
  }
}

script:post-response {
  if (res.status === 200) {
    const data = res.body.data;
    bru.setEnvVar("PAYMENT_ID", data.paymentId);
    console.log("✅ Payment processed successfully:", data.paymentId);
  } else {
    console.error("❌ Payment failed:", res.body);
  }
}

docs {
  # Pay for Order
  
  This endpoint processes payment for a specific order following the Stripe PaymentIntent pattern. It simulates the generated Flutter app payment workflow with support for 3D Secure authentication.
  
  ## Prerequisites
  - Order must exist and belong to the authenticated user
  - Order must not already be paid
  - Valid Stripe payment token required
    ## Request Body
  
  ```json
  {
    "paymentMethod": "credit_card",
    "paymentToken": "pm_1234567890abcdef",
    "savePaymentMethod": false
  }
  ```
  
  ### Parameters
  - `paymentMethod`: Payment method type (credit_card, debit_card, etc.)
  - `paymentToken`: Stripe payment method ID created client-side (required)
  - `savePaymentMethod`: Optional - whether to save payment method for future use
  
  ## Response Scenarios
  
  ### 1. Successful Payment (No 3D Secure Required)
    ```json
  {
    "status": "success",
    "message": "Payment processed successfully",
    "data": {
      "paymentId": "pay_1234567890",
      "orderId": "82d94ef6-3727-4f1e-81c8-d487867834c2",
      "amount": 440,
      "status": "paid"
    }
  }
  ```
  
  ### 2. 3D Secure Authentication Required
  
  **⚠️ IMPORTANT**: When Stripe requires 3D Secure authentication, this endpoint returns a `client_secret` that Flutter apps must use to complete payment authentication.
  
  ```json
  {
    "status": "requires_action",
    "message": "Additional authentication required",
    "data": {
      "paymentId": "pay_1234567890",
      "paymentIntentId": "pi_1234567890",
      "clientSecret": "pi_1234567890_secret_abcd1234"
    }
  }
  ```
  
  **Flutter Implementation Note**: The `clientSecret` should be passed to Stripe's `confirmPayment()` method to handle 3D Secure authentication flow.
  
  ### 3. Payment Failed
  
  ```json
  {
    "status": "error",
    "message": "Payment declined",
    "errors": [
      "Insufficient funds",
      "Card declined"
    ]
  }
  ```
  
  ## Backend Implementation Flow
  
  1. **Validate Request**: Check order exists and payment details
  2. **Create PaymentIntent**: Backend creates Stripe PaymentIntent with provided payment method
  3. **Attempt Confirmation**: Try to confirm payment automatically
  4. **Handle Response**:
     - If successful → Return success response
     - If 3D Secure required → Return `requires_action` with `client_secret`
     - If failed → Return error response
  
  ## Error Codes
  
  - `400`: Bad request (invalid order ID, missing payment method)
  - `401`: Unauthorized (invalid or missing JWT token)
  - `404`: Order not found  - `409`: Order already paid
  - `400`: Payment processing failed (Stripe error, invalid card, etc.)
}
