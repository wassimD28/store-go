meta {
  name: get-order-details
  type: http
  seq: 2
}

get {
  url: {{BASE_URL}}/api/mobile-app/orders/{{ORDER_ID}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{ACCESS_TOKEN}}
}

vars:pre-request {
  ORDER_ID: 8d55d6d2-fa1a-40e8-9045-12558fd763c6
}

script:pre-request {
  // Get the access token from environment variables
  const accessToken = bru.getEnvVar("ACCESS_TOKEN");
  
  if (accessToken) {
    // Set the access token in the request's auth header
    req.auth = {
      type: "bearer",
      bearer: accessToken
    };
    console.log("✅ Access token applied to request");
  } else {
    console.warn("⚠️ No access token found in environment variables");
  }
}

docs {
  # Get Order Details Endpoint
  
  This endpoint retrieves detailed information about a specific order placed by the user. It includes comprehensive details about the order, items, shipping, payment, and tracking information.
  
  ## Authentication Requirements
  
  - This endpoint requires authentication using a JWT bearer token
  - The token must be obtained from the sign-in endpoint
  - Users can only access their own order details
  
  ## Request Parameters
  
  | Parameter | Location | Required | Description |
  |-----------|----------|----------|-------------|
  | orderId   | Path     | Yes      | The UUID of the order to retrieve |
    ## Response Format
  
  The endpoint returns a JSON object with the following structure:
  
  ```json
  {
    "status": "success",
    "data": {
      "id": "order-uuid",
      "orderNumber": "ORD-12345",
      "status": "delivered",
      "paymentStatus": "paid",
      "subtotal": 999.97,
      "tax": 100.00,
      "shippingCost": 15.00,
      "totalAmount": 1114.97,
      "shippingAddress": {
        "street": "123 Main Street",
        "city": "New York",
        "state": "NY",
        "postalCode": "10001",
        "country": "USA",
        "phone": "+1234567890"
      },
      "billingAddress": {
        "street": "123 Main Street",
        "city": "New York",
        "state": "NY",
        "postalCode": "10001",
        "country": "USA",
        "phone": "+1234567890"
      },
      "paymentMethod": "credit_card",
      "notes": "Please leave at front door",
      "created_at": "2023-05-01T14:30:00Z",
      "updated_at": "2023-05-03T10:15:00Z",
      "items": [
        {
          "id": "order-item-uuid",
          "productId": "product-uuid",
          "productName": "Smartphone X",
          "quantity": 1,
          "unitPrice": 799.99,
          "totalPrice": 799.99,
          "variants": {
            "color": "black",
            "size": null
          },
          "product": {
            "id": "product-uuid",
            "name": "Smartphone X",
            "price": 799.99,
            "imageUrls": ["https://example.com/images/smartphone-x.jpg"]
          }
        },
        {
          "id": "order-item-uuid-2",
          "productId": "product-uuid-2",
          "productName": "Wireless Headphones",
          "quantity": 1,
          "unitPrice": 199.99,
          "totalPrice": 199.99,
          "variants": {
            "color": "white",
            "size": null
          },
          "product": {
            "id": "product-uuid-2",
            "name": "Wireless Headphones",
            "price": 199.99,
            "imageUrls": ["https://example.com/images/headphones.jpg"]
          }
        }
      ]
    }
  }
  ```
  
  ## Error Responses
  
  | Status Code | Description | Response Body |
  |-------------|-------------|---------------|
  | 400 | Invalid order ID | `{ "status": "error", "message": "Invalid order ID" }` |
  | 401 | Unauthorized | `{ "status": "error", "message": "Unauthorized" }` |
  | 403 | Not order owner | `{ "status": "error", "message": "You don't have permission to view this order" }` |
  | 404 | Order not found | `{ "status": "error", "message": "Order not found" }` |
  | 500 | Server error | `{ "status": "error", "message": "Failed to fetch order details" }` |
    ## Related Endpoints
  
  - `GET /api/mobile-app/orders` - Get all user orders
  - `PUT /api/mobile-app/orders/:orderId` - Update order status
  - `POST /api/mobile-app/orders/:orderId/pay` - Pay for order
  - `POST /api/mobile-app/orders` - Create new order
}
