meta {
  name: get-user-orders
  type: http
  seq: 1
}

get {
  url: {{PROD_BASE_URL}}/api/mobile-app/orders
  body: none
  auth: bearer
}

auth:bearer {
  token: {{ACCESS_TOKEN}}
}

script:pre-request {
  // Get the access token from environment variables
  const accessToken = bru.getEnvVar("ACCESS_TOKEN");
  
  if (accessToken) {
    // Set the access token in the request's auth header
    req.auth = {
      type: "bearer",
      bearer: accessToken
    };
    console.log("✅ Access token applied to request");
  } else {
    console.warn("⚠️ No access token found in environment variables");
  }
}

docs {
  # Get User Orders Endpoint
  
  This endpoint retrieves all orders placed by the authenticated user. It provides a comprehensive order history for the user.
  
  ## Authentication Requirements
  
  - This endpoint requires authentication using a JWT bearer token
  - The token must be obtained from the sign-in endpoint
  - Orders are specific to the authenticated user
  
  ## Query Parameters (Optional)
  
  | Parameter | Type   | Required | Description                                      |
  |-----------|--------|----------|--------------------------------------------------|
  | status    | string | No       | Filter by order status (e.g., "pending", "completed", "cancelled") |
  | limit     | number | No       | Maximum number of orders to return (default: 10) |
  | page      | number | No       | Page number for pagination (default: 1)          |
  
  ## Response Format
  
  The endpoint returns a JSON object with the following structure:
  
  ```json
  {
    "status": "success",
    "data": {
      "orders": [
        {
          "id": "order-uuid",
          "orderNumber": "ORD-12345",
          "userId": "user-uuid",
          "storeId": "store-uuid",
          "totalAmount": 1199.97,
          "status": "delivered",
          "shippingAddress": {
            "street": "123 Main Street",
            "city": "New York",
            "state": "NY",
            "zipCode": "10001",
            "country": "USA"
          },
          "paymentMethod": "credit_card",
          "created_at": "2023-05-01T14:30:00Z",
          "updated_at": "2023-05-03T10:15:00Z",
          "items": [
            {
              "productId": "product-uuid",
              "productName": "Smartphone X",
              "quantity": 1,
              "price": 799.99,
              "imageUrl": "https://example.com/images/smartphone-x.jpg"
            },
            {
              "productId": "product-uuid-2",
              "productName": "Wireless Headphones",
              "quantity": 2,
              "price": 199.99,
              "imageUrl": "https://example.com/images/headphones.jpg"
            }
          ]
        },
        {
          "id": "order-uuid-2",
          "orderNumber": "ORD-12346",
          "userId": "user-uuid",
          "storeId": "store-uuid",
          "totalAmount": 49.99,
          "status": "processing",
          "shippingAddress": {
            "street": "123 Main Street",
            "city": "New York",
            "state": "NY",
            "zipCode": "10001",
            "country": "USA"
          },
          "paymentMethod": "paypal",
          "created_at": "2023-05-10T09:20:00Z",
          "updated_at": "2023-05-10T09:20:00Z",
          "items": [
            {
              "productId": "product-uuid-3",
              "productName": "Phone Case",
              "quantity": 1,
              "price": 49.99,
              "imageUrl": "https://example.com/images/phone-case.jpg"
            }
          ]
        }
      ],
      "pagination": {
        "total": 5,
        "page": 1,
        "limit": 10,
        "pages": 1
      }
    }
  }
  ```
  
  ## Error Responses
  
  | Status Code | Description | Response Body |
  |-------------|-------------|---------------|
  | 401 | Unauthorized | `{ "status": "error", "message": "Unauthorized" }` |
  | 500 | Server error | `{ "status": "error", "message": "Failed to fetch orders" }` |
  
  ## Related Endpoints
  
  - `GET /api/mobile-app/orders/:orderId` - Get details for a specific order
  - `POST /api/mobile-app/cart/checkout` - Create a new order (checkout)
  - `PUT /api/mobile-app/orders/:orderId/cancel` - Cancel an order
}
