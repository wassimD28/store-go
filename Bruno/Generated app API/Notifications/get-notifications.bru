meta {
  name: get-notifications
  type: http
  seq: 1
}

get {
  url: {{PROD_BASE_URL}}/api/mobile-app/notifications
  body: none
  auth: bearer
}

auth:bearer {
  token: {{ACCESS_TOKEN}}
}

script:pre-request {
  // Get the access token from environment variables
  const accessToken = bru.getEnvVar("ACCESS_TOKEN");
  
  if (accessToken) {
    // Set the access token in the request's auth header
    req.auth = {
      type: "bearer",
      bearer: accessToken
    };
    console.log("✅ Access token applied to request");
  } else {
    console.warn("⚠️ No access token found in environment variables");
  }
}

docs {
  # Get User Notifications Endpoint
  
  This endpoint retrieves all notifications for the authenticated user in the StoreGo platform. Notifications keep users informed about order updates, promotional offers, and other important events.
  
  ## Authentication Requirements
  
  - This endpoint requires authentication using a JWT bearer token
  - The token must be obtained from the sign-in endpoint
  - Notifications are specific to the authenticated user
  
  ## Query Parameters (Optional)
  
  | Parameter | Type   | Required | Description                                      |
  |-----------|--------|----------|--------------------------------------------------|
  | limit     | number | No       | Maximum number of notifications to return (default: 20) |
  | page      | number | No       | Page number for pagination (default: 1)          |
  | status    | string | No       | Filter by status: "read", "unread", or "all" (default: "all") |
  
  ## Response Format
  
  The endpoint returns a JSON object with the following structure:
  
  ```json
  {
    "status": "success",
    "data": {
      "notifications": [
        {
          "id": "notification-uuid",
          "userId": "user-uuid",
          "storeId": "store-uuid",
          "title": "Order Shipped",
          "message": "Your order #1234 has been shipped and is on its way!",
          "type": "order_update",
          "referenceId": "order-uuid",
          "isRead": false,
          "imageUrl": "https://example.com/notification-image.jpg",
          "created_at": "2023-05-15T10:30:00Z",
          "updated_at": "2023-05-15T10:30:00Z"
        },
        {
          "id": "notification-uuid-2",
          "userId": "user-uuid",
          "storeId": "store-uuid",
          "title": "Weekend Sale",
          "message": "Don't miss our weekend sale with 20% off on all products!",
          "type": "promotion",
          "referenceId": null,
          "isRead": true,
          "imageUrl": "https://example.com/sale-image.jpg",
          "created_at": "2023-05-10T08:00:00Z",
          "updated_at": "2023-05-10T15:45:00Z"
        }
      ],
      "pagination": {
        "total": 24,
        "page": 1,
        "limit": 20,
        "pages": 2
      }
    }
  }
  ```
  
  ## Response Fields
  
  | Field        | Type      | Description                                      |
  |--------------|-----------|--------------------------------------------------|
  | id           | UUID      | Unique identifier for the notification           |
  | userId       | UUID      | ID of the user this notification belongs to      |
  | storeId      | UUID      | ID of the store associated with this notification|
  | title        | String    | Brief title describing the notification          |
  | message      | String    | Detailed notification message                    |
  | type         | String    | Type of notification (order_update, promotion, etc.) |
  | referenceId  | UUID/null | Optional ID referencing related entity (order, product, etc.) |
  | isRead       | Boolean   | Whether the notification has been read           |
  | imageUrl     | String    | Optional URL to an image for the notification    |
  | created_at   | Timestamp | When the notification was created                |
  | updated_at   | Timestamp | When the notification was last updated           |
  
  ## Error Responses
  
  | Status Code | Description | Response Body |
  |-------------|-------------|---------------|
  | 401 | Unauthorized | `{ "status": "error", "message": "Unauthorized" }` |
  | 500 | Server error | `{ "status": "error", "message": "Failed to fetch notifications" }` |
  
  ## Related Endpoints
  
  - `GET /api/mobile-app/notifications/:id` - Get a specific notification
  - `PUT /api/mobile-app/notifications/:id/read` - Mark a notification as read
  - `PUT /api/mobile-app/notifications/read-all` - Mark all notifications as read
  - `DELETE /api/mobile-app/notifications/:id` - Delete a notification
}
